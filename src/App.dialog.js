import React from "react";
import { DialogContext } from "./contexts";
import Dialog from "@material-ui/core/Dialog";
import DialogActions from "@material-ui/core/DialogActions";
import DialogContent from "@material-ui/core/DialogContent";
import DialogContentText from "@material-ui/core/DialogContentText";
import DialogTitle from "@material-ui/core/DialogTitle";
import Button from "@material-ui/core/Button";
import { withStyles } from "@material-ui/core";

const styles = (theme) => ({
  dialog: {
    minWidth: 600,
    zIndex: 3,
    background: "white",
    [theme.breakpoints.down('sm')]:{
      minWidth: 290,
  }
  },
  closeBtn: {
    margin: "16px 24px",
    position: "absolute",
    right: 0,
  },
  slide_in_fwd_br: {
    WebkitAnimation:
      `$slide-in-fwd-br 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both`,
    animation:
      `$slide-in-fwd-br 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both`,
  },
  /* ----------------------------------------------
   * Generated by Animista on 2021-8-29 23:30:44
   * Licensed under FreeBSD License.
   * See http://animista.net/license for more info.
   * w: http://animista.net, t: @cssanimista
   * ---------------------------------------------- */

  /**
   * ----------------------------------------
   * animation slide-in-fwd-br
   * ----------------------------------------
   */
  "@-webkit-keyframes slide-in-fwd-br": {
    "0%": {
      "-webkit-transform":
        "translateZ(-1400px) translateY(800px) translateX(1000px)",
      transform: "translateZ(-1400px) translateY(800px) translateX(1000px)",
      opacity: 0,
    },
    "100%": {
      "-webkit-transform": "translateZ(0) translateY(0) translateX(0)",
      transform: "translateZ(0) translateY(0) translateX(0)",
      opacity: 1,
    },
  },
  "@keyframes slide-in-fwd-br": {
    "0%": {
      "-webkit-transform":
        "translateZ(-1400px) translateY(800px) translateX(1000px)",
      transform: "translateZ(-1400px) translateY(800px) translateX(1000px)",
      opacity: 0,
    },
    "100%": {
      "-webkit-transform": "translateZ(0) translateY(0) translateX(0)",
      transform: "translateZ(0) translateY(0) translateX(0)",
      opacity: 1,
    },
  },
  // --

  /* ----------------------------------------------
   * Generated by Animista on 2021-8-29 23:37:1
   * Licensed under FreeBSD License.
   * See http://animista.net/license for more info.
   * w: http://animista.net, t: @cssanimista
   * ---------------------------------------------- */

  /**
   * ----------------------------------------
   * animation slide-out-bck-right
   * ----------------------------------------
   */
  slide_out_bck_right: {
    WebkitAnimation:
      `$slide-out-bck-right 0.5s cubic-bezier(0.550, 0.085, 0.680, 0.530) both`,
    animation:
      `$slide-out-bck-right 0.5s cubic-bezier(0.550, 0.085, 0.680, 0.530) both`,
  },
  "@-webkit-keyframes slide-out-bck-right": {
    "0%": {
      "-webkit-transform": "translateZ(0) translateX(0)",
      transform: "translateZ(0) translateX(0)",
      opacity: 1,
    },
    "100%": {
      "-webkit-transform": "translateZ(-1100px) translateX(1000px)",
      transform: "translateZ(-1100px) translateX(1000px)",
      opacity: 0,
    },
  },
  "@keyframes slide-out-bck-right": {
    "0%": {
      "-webkit-transform": "translateZ(0) translateX(0)",
      transform: "translateZ(0) translateX(0)",
      opacity: 1,
    },
    "100%": {
      "-webkit-transform": "translateZ(-1100px) translateX(1000px)",
      transform: "translateZ(-1100px) translateX(1000px)",
      opacity: 0,
    },
  },
});

class AppDialog extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      open: false,
      title: "",
      body: "",
      positiveBtn: "Ok",
      negativeBtn: "Cancel",
      negativeBtnDontShow: false,
      dontShowButtons: false,
      onOk: () => null,
      onCancel: this.close,
    };
  }

  close = () => {
    this.setState({
      open: false,

      // THIS PART IS COMMENTED ON A CAUSE

      // title: "",
      // body: "",
      // positiveBtn: "Ok",
      // negativeBtn: "Cancel",
    });
  };

  set = (props) => {
    
    // const { classes } = this.props;
    // console.log(document?.querySelector("[role='dialog']"))
    // 
    // if(document?.querySelector("[role='dialog']")){
    //   let ele = document.querySelector("[role='dialog']")
    //   ele.classList.remove("AppDialog-slide_in_fwd_br-3")
    //   console.log(ele.className)
    //   
    //   ele.classList.add(classes.slide_out_bck_right)
    //   console.log(ele.className)
    //   
    // }
    this.setState({ ...props });
  };

  render() {
    const { classes } = this.props;
    return (
      <DialogContext.Provider
        value={{
          ...this.state,
          setDialog: this.set,
        }}
      >
        {this.props.children}
        <Dialog
          open={this.state.open}
          onClose={this.state.onCancel}
          aria-labelledby="alert-dialog-title"
          aria-describedby="alert-dialog-description"
          // className={classes.slide_in_fwd_br}
          classes={{
            paper: `${classes.dialog} ${ this.state.open ? classes.slide_in_fwd_br : classes.slide_out_bck_right}`,
          }}
        >
          <DialogTitle id="alert-dialog-title">{this.state.title}</DialogTitle>
          <DialogContent>
            <DialogContentText id="alert-dialog-description">
              {this.state.body}
            </DialogContentText>
          </DialogContent>
          {!this.state.dontShowButtons && (
            <DialogActions>
              {!Boolean(this.state?.negativeBtnDontShow) && (
                <Button
                  onClick={this.state.onCancel}
                  color="primary"
                  style={{background:"linear-gradient(to right, #3F5EFB, #FC466B)"}}
                  variant="contained"
                >
                  {this.state.negativeBtn}
                </Button>
              )}

              {!Boolean(this.state?.positiveBtnDontShow) && (
                <Button
                  onClick={this.state.onOk}
                  color="primary"
                  variant="contained"
                  autoFocus
                  style={{background:"linear-gradient(to right, #3F5EFB, #FC466B)"}}

                >
                  {this.state.positiveBtn}
                </Button>
              )}
            </DialogActions>
          )}
          {/* {this.state.dontShowButtons && <Button variant="contained" color="primary" className={classes.closeBtn} onClick={this.state.onCancel}>CLOSE</Button>} */}
        </Dialog>
      </DialogContext.Provider>
    );
  }
}

export default withStyles(styles)(AppDialog);
